// STag Lark Grammar
// LALR(1)

tag             : (text | "{" stmt_list "}")+

stmt_list       : _stmt (";" _stmt)*

_stmt           : _simple_stmt
                //| var_assign

//_simple_stmt    : lambda
//                | _expr
_simple_stmt    : ternary_expr
                | lambda
                | fun_call
                | macro
                | infix_call
                | index
                | attr
                | _atom

_atom           : list
                | range
                | dict
                | _expr

_expr           : or_test

?or_test        : and_test   (lor_op    and_test)*
?and_test       : ident_test (land_op   ident_test)*

?ident_test     : bitwise_expr "is" "not" ident_test -> is_not_test
                | bitwise_expr "is" ident_test       -> is_test
                | bitwise_expr

?bitwise_expr   : eq_expr    (bit_op    eq_expr)*
?eq_expr        : cmp_expr   (eq_op     cmp_expr)*
?cmp_expr       : add_expr   (cmp_op    add_expr)*
?add_expr       : mul_expr   (add_op    mul_expr)*
?mul_expr       : unary_expr (mul_op    unary_expr)*

unary_expr      : unary_op? _primary

!lor_op         : "or"
!land_op        : "and"
!bit_op         : "|" | "^" | "&" | ">>" | "<<"
!eq_op          : "==" | "!="
!cmp_op         : "<" | "<=" | ">=" | ">" | "in"
!add_op         : "+" | "-"
!mul_op         : "*" | "/" | "%" | "**" | "//"

!unary_op       : "not" | "-" | "~" | "+"

_primary        : "(" _expr ")"
                | ident
                | literal

ident          : NAME

safe_ident     : SAFE_NAME

!literal         : number
                | STRING
                | "True"
                | "False"
                | "None"

// Standalone expressions
ternary_expr    : _simple_stmt "if" _simple_stmt "else" _simple_stmt

lambda          : "<|" ident "->" _simple_stmt
                | "<|(" fun_param_list ")" "->" _simple_stmt

fun_call        : "(" _simple_stmt "!" fun_args? ")"

macro           : "(" ident "[" fun_param_list "]" stmt_list ")"

infix_call      : _simple_stmt "`" ident "`" _simple_stmt

index           : _simple_stmt "[" subscript_list "]"

attr            : _simple_stmt "." ident

var_assign      : ident "=" _simple_stmt

list            : "[" list_comp? "]"

range           : "{" range_comp "}"

dict            : "{" dict_comp? "}"


// Function params
fun_param_list  : ident* star_params? kw_params?
                | star_params kw_params?
                | kw_params

star_params     : ("*" ident)+

kw_params       : ("**" ident)+

// Function args
fun_args        : _simple_stmt+ star_args? kw_args?
                | star_args kw_args?
                | kw_args

star_args       : ("*" _simple_stmt)+

kw_args         : (("**" _simple_stmt) | (ident "=" _simple_stmt))+

// Subscript
subscript_list  : subscript_start? [":" subscript_end? subscript_step?]

subscript_start : _simple_stmt
subscript_end   : _simple_stmt
subscript_step  : ":" _simple_stmt

// List comp
list_comp       : (_simple_stmt | list_args) ("," (_simple_stmt | list_args))*
                | list_comp_for

list_comp_for   : _simple_stmt "for" comp_ident "in" (_simple_stmt | list_comp_for) comp_expr?

list_args      : "*" _simple_stmt

comp_if         : "if" _expr

comp_ident      : ident
                | "(" ident ("," ident)* ","? ")"

comp_expr       : "when" _expr

// Dict comp
dict_comp       : (dict_item | dict_args) ("," (dict_item | dict_args))*
                | dict_comp_for

dict_comp_for   : "(" (_simple_stmt ":" _simple_stmt) ")" "for" comp_ident "in" (_simple_stmt | dict_comp_for) comp_expr?

dict_item       : _primary ":" _simple_stmt

dict_args       : "**" _simple_stmt

// Range
range_comp      : start_idx? ".." end_idx? range_step?

start_idx       : _simple_stmt

end_idx         : _simple_stmt

range_step      : "@" _simple_stmt



// Terminals
number          : DEC_NUMBER | HEX_NUMBER | OCT_NUMBER | BIN_NUMBER | FLOAT_NUMBER// | IMAG_NUMBER
text            : TEXT
//string: STRING | LONG_STRING

NAME            : /[a-z_Ͱ-Ͽ∀-⋿]+/iu
SAFE_NAME       : /[a-z_]\w*/i
_NEWLINE        : ( /\r?\n[\t ]*/ )+


// Anything up to unescaped {
TEXT            : /((?!(?<!\\){).)+/si

STRING          : /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i

DEC_NUMBER      : /0|[1-9]\d*/i
HEX_NUMBER.2    : /0x[\da-f]*/i
OCT_NUMBER.2    : /0o[0-7]*/i
BIN_NUMBER.2    : /0b[0-1]*/i
FLOAT_NUMBER    : /((\d+\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
//IMAG_NUMBER.2: /\d+j|${FLOAT_NUMBER}j/i

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT